(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{200:function(e,t,r){"use strict";r.r(t);var a=r(0),s=Object(a.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"architecture"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#architecture","aria-hidden":"true"}},[e._v("#")]),e._v(" Architecture")]),e._v(" "),r("h2",{attrs:{id:"the-ercole-project"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#the-ercole-project","aria-hidden":"true"}},[e._v("#")]),e._v(" The Ercole Project")]),e._v(" "),r("p",[r("img",{attrs:{src:"/architecture.png",alt:"Architecture",title:"Architecture"}})]),e._v(" "),r("p",[e._v("The Ercole projects is made up of the following components/projects:")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("Ercole Server:")]),e._v(" Provides the data collection endpoint and methods for the User Interface.")]),e._v(" "),r("li",[r("strong",[e._v("Ercole Web:")]),e._v(" the user interface: dashboard, alerts, host details, etc.")]),e._v(" "),r("li",[r("strong",[e._v("Ercole Agent(s):")]),e._v(" Data collectors to be installed on the target machines.")])]),e._v(" "),r("p",[e._v("Ercole Agents are typically packaged as daemons / services for the supported platforms.\nOnce started, the agent periodically executes a set of operations:")]),e._v(" "),r("ul",[r("li",[e._v("launch a series of 'fetchers': shell commands to retrieve System and Oracle instance information")]),e._v(" "),r("li",[e._v("transform the collected data into a JSON object")]),e._v(" "),r("li",[e._v("send the data to the Ercole Server via a HTTP POST request")])]),e._v(" "),r("p",[e._v("The Ercole Server is responsible of:")]),e._v(" "),r("ul",[r("li",[e._v("Receiving the host data from the agent via HTTP")]),e._v(" "),r("li",[e._v("Storing the data in a PostgreSQL database")]),e._v(" "),r("li",[e._v("Archiving previous host information if already present in the db")]),e._v(" "),r("li",[e._v("Processing the incoming host data and generating alerts (i.e., a new feature has been activated)")]),e._v(" "),r("li",[e._v("Serving data to the Web User interface via a REST API")])]),e._v(" "),r("h2",{attrs:{id:"data-format"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#data-format","aria-hidden":"true"}},[e._v("#")]),e._v(" Data format")]),e._v(" "),r("p",[e._v("The PostgreSQL database main tables are:")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("current_host:")]),e._v(" contains a few 'search-friendly' columns (hostname, databases, environment) and two columns (host_info and extra_info) to store the detailed json data for the host. Note the columns are LONGTEXT, casting\nto json/jsonb happens at query level in the server methods.")]),e._v(" "),r("li",[r("strong",[e._v("historical_host:")]),e._v(" a copy of current_host, holds historical data")]),e._v(" "),r("li",[r("strong",[e._v("alert:")]),e._v(" alerts generated by the server")]),e._v(" "),r("li",[r("strong",[e._v("license:")]),e._v(" number of purchased Oracle Licenses (declared by the user in Ercole Web).")])]),e._v(" "),r("h2",{attrs:{id:"deployment"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#deployment","aria-hidden":"true"}},[e._v("#")]),e._v(" Deployment")]),e._v(" "),r("p",[e._v("Currently Ercole-Server embeds Ercole agents and Ercole Web, so it can be deployed as a\nstandalone jar.")]),e._v(" "),r("p",[e._v("It is recommended to set up a proxy server (nginx, apache) in front of Ercole Server to provide\nSSL communication between the agents and the server.")]),e._v(" "),r("h2",{attrs:{id:"future-versions"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#future-versions","aria-hidden":"true"}},[e._v("#")]),e._v(" Future versions")]),e._v(" "),r("p",[e._v("In the future (version 2.x) we're considering a few enhancements that will likely split up\nthe architecture and impact the data format:")]),e._v(" "),r("p",[r("img",{attrs:{src:"/architecture-v2.png",alt:"ArchitectureV2",title:"ArchitectureV2"}})]),e._v(" "),r("ul",[r("li",[e._v("Move to mongodb or other json-based storage")]),e._v(" "),r("li",[e._v("Create separate services:\n"),r("ul",[r("li",[e._v("Alert: Generate alerts, send notifications. Expose data for 3rd party usage (i.e. prometheus)")]),e._v(" "),r("li",[e._v("API: provides REST APIs for the User Interface")]),e._v(" "),r("li",[e._v("Data: receives data from the agent")]),e._v(" "),r("li",[e._v("Repo: provides a yum repository (proxy?) for the agent binaries")])])]),e._v(" "),r("li",[e._v("Implement a self-update mechanism for the agents, move agent packages to a dedicated repository/service")]),e._v(" "),r("li",[e._v("Use Go as preferred language for services")])]),e._v(" "),r("p",[e._v("Note that this list is subject to change, new ideas, etc.")])])},[],!1,null,null,null);t.default=s.exports}}]);